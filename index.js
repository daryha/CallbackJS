function orderBurger(callback) {
  setTimeout(() => {
    console.log("üçî –ë—É—Ä–≥–µ—Ä –≥–æ—Ç–æ–≤");
    callback();
  }, 1000);
}

function addFries(callback, errorCallback) {
  setTimeout(() => {
    const friesInStock = Math.random() > 0.5;

    if (friesInStock) {
      console.log("üçü –ö–∞—Ä—Ç–æ—à–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞");
      callback();
    } else {
      errorCallback("‚ùå –ö–∞—Ä—Ç–æ—à–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å");
    }
  }, 1000);
}

function takeDrink(callback) {
  setTimeout(() => {
    console.log("ü•§ –ù–∞–ø–∏—Ç–æ–∫ –≤–∑—è—Ç");
    callback();
  }, 1000);
}

function pending(num, callback) {
  setTimeout(() => {
    console.log(`–ó–∞–∫–∞–∑ ‚Ññ${num}`);
    callback();
  }, 1000);
}

function order(num, callback) {
  pending(num, () => {
    orderBurger(() => {
      addFries(
        () => {
          takeDrink(() => {
            console.log("–ó–ê–ö–ê–ó –í–´–ü–û–õ–ù–ï–ù!!!!");
            callback();
          });
        },
        (text) => {
          console.log(`${text}, —É–ø—Å..`);
          console.log("–ó–ê–ö–ê–ó –û–¢–ú–ï–ù–ï–ù");
          callback();
        }
      );
    });
  });
}

order(1, () => {
  order(2, () => {
    order(3, () => {
      console.log("–≤—Å–µ 3 –∑–∞–∫–∞–∑–∞ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
    });
  });
});
